<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PROVIDER</name>
          <description>The provider to use for the test run.</description>
          <defaultValue>{{provider}}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SIZE</name>
          <description>The machine size to use for the test run.</description>
          <defaultValue>{{size}}</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KELDA_VERSION</name>
          <description>The Kelda release to test.</description>
          <defaultValue>dev</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NUMBER_WORKERS</name>
          <description>The number of Kelda workers to boot.</description>
          <defaultValue>3</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.junitrealtimetestreporter.PerJobConfiguration plugin="junit-realtime-test-reporter@0.5"/>
  </properties>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger plugin="parameterized-scheduler@0.4">
      <spec></spec>
      <parameterizedSpecification>0 * * * *</parameterizedSpecification>
    </org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
        <command>
export GOPATH=${WORKSPACE}/gohome
export PATH=${GOPATH}/bin:${WORKSPACE}/bin:${PATH}

# Kelda requires that namespaces be lowercase.
lowerCaseProvider=$(echo ${PROVIDER} | tr '[:upper:]' '[:lower:]')
export TESTING_NAMESPACE=&quot;${TESTING_NAMESPACE_PREFIX}-${lowerCaseProvider}&quot;
export KELDA_HOST=&quot;unix://${WORKSPACE}/${TESTING_NAMESPACE}.sock&quot;

srcPath=$GOPATH/src/github.com/kelda/kelda
mkdir -p ${srcPath}

{{copyCommand}}
tar xzf release.tar.gz --strip-components=1 -C ${srcPath}

mkdir ${WORKSPACE}/bin
cp ${srcPath}/kelda_linux ${WORKSPACE}/bin/kelda
chmod 755 ${WORKSPACE}/bin/kelda

cd ${srcPath}/integration-tester
go build .
make tests

./integration-tester --preserve-failed -testRoot=./tests -junitOut=${WORKSPACE}/test-results</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.log,*_debug_logs/**/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.27">
            <script><![CDATA[import groovy.json.JsonOutput
import hudson.tasks.test.AbstractTestResultAction
import hudson.tasks.junit.CaseResult
import hudson.tasks.junit.TestResult

def notifySlack(channel, attachments) {
    def slackURL = manager.getEnvVariable('SLACK_WEBHOOK')
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

    def payload = JsonOutput.toJson([
        channel: channel,
        username: 'jenkins',
        icon_url: jenkinsIcon,
        attachments: attachments,
    ])

    ['curl', '-X', 'POST', '-H', 'Content-type: application/json',
        '--data', payload, slackURL].execute()
}

// Make build parameters visible in the list of past jobs.
def version = manager.build.buildVariables.get('KELDA_VERSION')
def provider = manager.build.buildVariables.get('PROVIDER')
def nWorkers = manager.build.buildVariables.get('NUMBER_WORKERS')
manager.addShortText("Version: ${version}")
manager.addShortText("Provider: ${provider}")
manager.addShortText("Workers: ${nWorkers}")

// Post the build result to Slack.
def testResultAction = manager.build.getAction(AbstractTestResultAction.class)
def numTotal = testResultAction.getTotalCount()
def numFailed = testResultAction.getFailCount()
def numSkipped = testResultAction.getSkipCount()
def numPassed = numTotal - numFailed - numSkipped

def message = "Passed: ${numPassed}, Failed: ${numFailed}, Skipped: ${numSkipped}"
def color = 'good'
if (numTotal == 0) {
    color = 'warning'
} else if (numFailed != 0) {
    message += '\n<!channel> Some tests failed.'
    color = 'danger'
}

def buildNumber = manager.getEnvVariable('BUILD_NUMBER')
def buildURL = manager.getEnvVariable('BUILD_URL')
def attachments = [
    [
        title: "#${buildNumber} - ${provider} | Version ${version} | ${nWorkers} Workers",
        title_link: "${buildURL}",
        text: message,
        color: color,
    ],
]

def gitRepoPath = manager.build.getWorkspace().child('gohome/src/github.com/kelda/kelda').toURI()
def gitCommit = ['git', 'log', '-1', '--pretty=%an | %s'].execute(null, new File(gitRepoPath)).text
attachments << [
    title: 'Git Commit',
    text: gitCommit,
    color: color,
]

if (numFailed > 0) {
    // We have to use getResult() and cast the test result because testResultAction.getFailedTests()
    // is not defined by the junit-realtime-test-reporter plugin.
    def testResult = (TestResult) testResultAction.getResult()
    def failedTestsStr = ''
    for (CaseResult cr : testResult.getFailedTests()) {
        failedTestsStr += "<${manager.build.getAbsoluteUrl()}/testReport/${cr.getUrl()}|${cr.getName()}> after ${cr.getDurationString()}\n"
    }
    attachments << [
        title: 'Failed Tests',
        text: failedTestsStr,
        color: color,
    ]
}

notifySlack(manager.getEnvVariable('SLACK_CHANNEL'), attachments)]]></script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.20">
      <testResults>test-results/*.xml</testResults>
      <keepLongStdio>true</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <hudson.plugins.claim.ClaimPublisher plugin="claim@2.9"/>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
    <jenkins.plugins.nodejs.NodeJSBuildWrapper plugin="nodejs@1.2.1">
        <nodeJSInstallationName>node-6.9.0</nodeJSInstallationName>
    </jenkins.plugins.nodejs.NodeJSBuildWrapper>
    <org.jenkinsci.plugins.golang.GolangBuildWrapper plugin="golang@1.2">
      <goVersion>go-1.8</goVersion>
    </org.jenkinsci.plugins.golang.GolangBuildWrapper>
  </buildWrappers>
</project>
